//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Input/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""e28bc763-7533-4fc5-9dda-a08301bfdc8c"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Value"",
                    ""id"": ""df4b6111-0543-4620-8065-4ecaa1c8c230"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5c010532-9900-4beb-b4b6-4babcb245422"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""76d61c8f-e866-48be-a4b2-aa6187d07a98"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": "" CompleteBrake"",
                    ""type"": ""Button"",
                    ""id"": ""0a4b74d0-7e0e-4bb1-8aa4-7501ad300418"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""43c9e78c-299f-491b-94e3-6bdf8c8b4d78"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da3adde2-c441-45c7-a2a9-bc8c624de2e3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0cb3569-cc7a-48ce-8ffa-8830d7190b2f"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4a600ae3-09bd-4a95-b454-2141abb61ece"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""19a2e55c-e7e9-4455-b7c5-4fcf2b66c36f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8f331ed7-59b0-42b8-9526-0897831e21ce"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""52990bbb-a5c8-4ce0-bf4b-a1831a46613f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""812b5932-47d1-4b8b-ad57-62f876dda145"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""00c9dcb7-6e0a-47ad-abce-03a6ec1e9a96"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5cdaa0-0296-48af-8342-72525a33c837"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e904a135-0c32-4f71-8d4f-7a5412cf0c59"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" CompleteBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a11b336-4af4-445e-b0dc-12e165bf3e38"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": "" CompleteBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMove"",
            ""id"": ""845c738b-73b9-48d8-a238-bed26f1e0470"",
            ""actions"": [
                {
                    ""name"": ""ChangeCam"",
                    ""type"": ""Button"",
                    ""id"": ""047d2811-799d-43ce-bac6-760264462156"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""21a09035-d33d-4328-aa10-efe6d4a999be"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookBack"",
                    ""type"": ""Button"",
                    ""id"": ""ec9ca82c-af02-41bf-92d7-aad48b902ff1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ae074853-4802-443d-b474-468908740e41"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd8e4f65-e2da-4b3b-8390-dbf4f7fd9326"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""880e2645-15ba-4187-8eea-c3268001a1ab"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f582089-9479-4711-be00-c6a52f7b726d"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17969b89-eb5a-40fe-87b6-86e267c291ba"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Accelerate = m_Movement.FindAction("Accelerate", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        m_Movement_Brake = m_Movement.FindAction("Brake", throwIfNotFound: true);
        m_Movement_CompleteBrake = m_Movement.FindAction(" CompleteBrake", throwIfNotFound: true);
        // CameraMove
        m_CameraMove = asset.FindActionMap("CameraMove", throwIfNotFound: true);
        m_CameraMove_ChangeCam = m_CameraMove.FindAction("ChangeCam", throwIfNotFound: true);
        m_CameraMove_Rotation = m_CameraMove.FindAction("Rotation", throwIfNotFound: true);
        m_CameraMove_LookBack = m_CameraMove.FindAction("LookBack", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_Accelerate;
    private readonly InputAction m_Movement_Move;
    private readonly InputAction m_Movement_Brake;
    private readonly InputAction m_Movement_CompleteBrake;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_Movement_Accelerate;
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputAction @Brake => m_Wrapper.m_Movement_Brake;
        public InputAction @CompleteBrake => m_Wrapper.m_Movement_CompleteBrake;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @CompleteBrake.started += instance.OnCompleteBrake;
            @CompleteBrake.performed += instance.OnCompleteBrake;
            @CompleteBrake.canceled += instance.OnCompleteBrake;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @CompleteBrake.started -= instance.OnCompleteBrake;
            @CompleteBrake.performed -= instance.OnCompleteBrake;
            @CompleteBrake.canceled -= instance.OnCompleteBrake;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // CameraMove
    private readonly InputActionMap m_CameraMove;
    private List<ICameraMoveActions> m_CameraMoveActionsCallbackInterfaces = new List<ICameraMoveActions>();
    private readonly InputAction m_CameraMove_ChangeCam;
    private readonly InputAction m_CameraMove_Rotation;
    private readonly InputAction m_CameraMove_LookBack;
    public struct CameraMoveActions
    {
        private @PlayerControls m_Wrapper;
        public CameraMoveActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeCam => m_Wrapper.m_CameraMove_ChangeCam;
        public InputAction @Rotation => m_Wrapper.m_CameraMove_Rotation;
        public InputAction @LookBack => m_Wrapper.m_CameraMove_LookBack;
        public InputActionMap Get() { return m_Wrapper.m_CameraMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMoveActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Add(instance);
            @ChangeCam.started += instance.OnChangeCam;
            @ChangeCam.performed += instance.OnChangeCam;
            @ChangeCam.canceled += instance.OnChangeCam;
            @Rotation.started += instance.OnRotation;
            @Rotation.performed += instance.OnRotation;
            @Rotation.canceled += instance.OnRotation;
            @LookBack.started += instance.OnLookBack;
            @LookBack.performed += instance.OnLookBack;
            @LookBack.canceled += instance.OnLookBack;
        }

        private void UnregisterCallbacks(ICameraMoveActions instance)
        {
            @ChangeCam.started -= instance.OnChangeCam;
            @ChangeCam.performed -= instance.OnChangeCam;
            @ChangeCam.canceled -= instance.OnChangeCam;
            @Rotation.started -= instance.OnRotation;
            @Rotation.performed -= instance.OnRotation;
            @Rotation.canceled -= instance.OnRotation;
            @LookBack.started -= instance.OnLookBack;
            @LookBack.performed -= instance.OnLookBack;
            @LookBack.canceled -= instance.OnLookBack;
        }

        public void RemoveCallbacks(ICameraMoveActions instance)
        {
            if (m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMoveActions @CameraMove => new CameraMoveActions(this);
    public interface IMovementActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnCompleteBrake(InputAction.CallbackContext context);
    }
    public interface ICameraMoveActions
    {
        void OnChangeCam(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnLookBack(InputAction.CallbackContext context);
    }
}
